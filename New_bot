import streamlit as st
import subprocess
import os
import pandas as pd
from datetime import datetime

# ----------------------------
# Authentication Logic
# ----------------------------

# Dummy user credentials (plain-text for demo only)
USER_CREDENTIALS = {
    "admin": "1234",
    "manager": "abcd"
}

def verify_login(username, password):
    return USER_CREDENTIALS.get(username) == password

# ----------------------------
# Login Interface
# ----------------------------
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    st.title("üîê Bank CIF Portal Login")

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    login_btn = st.button("Login")

    if login_btn:
        if verify_login(username, password):
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Welcome, {username}!")
            st.rerun()
        else:
            st.error("Invalid username or password")

    st.stop()

# ----------------------------
# Logout Button
# ----------------------------
st.sidebar.markdown("---")
st.sidebar.button("üîì Logout", on_click=lambda: st.session_state.update({"logged_in": False}))

# ----------------------------
# Config Paths
# ----------------------------
BASH_FILE = r"C:\Path\To\Your\Script\run_process.bat"             # üü† Replace with your actual BAT or SH file path
SAVE_FILE_PATH = r"C:\Users\HP\Documents\saved_data.xlsx"         # üíæ Data saved by the app
DISPLAY_FILE_PATH = r"C:\Users\HP\Documents\display_data.xlsx"    # üìÇ External/pre-saved data shown in app

st.set_page_config(page_title="Bank CIF Portal", layout="wide")

# ----------------------------
# Custom CSS Styling
# ----------------------------
st.markdown("""
    <style>
    section[data-testid="stSidebar"] {
        background-color: #003366 !important;
        color: white !important;
        padding: 1rem;
    }
    section[data-testid="stSidebar"] .stRadio,
    section[data-testid="stSidebar"] .stSelectbox,
    section[data-testid="stSidebar"] .stTextInput,
    section[data-testid="stSidebar"] .stMultiSelect,
    section[data-testid="stSidebar"] .stNumberInput {
        background-color: white !important;
        border-radius: 8px;
        padding: 8px 12px;
        color: #003366 !important;
    }
    section[data-testid="stSidebar"] label,
    section[data-testid="stSidebar"] .css-1c7y2kd {
        color: #003366 !important;
        font-weight: 600;
    }
    section[data-testid="stSidebar"] .stRadio > div > label {
        color: #003366 !important;
        font-weight: 500;
    }
    section[data-testid="stSidebar"] input,
    section[data-testid="stSidebar"] select,
    section[data-testid="stSidebar"] textarea {
        color: #003366 !important;
        font-weight: 500;
    }
    div.stButton > button {
        background-color: #FFCC00 !important;
        color: #003366 !important;
        border: none;
        border-radius: 6px;
        padding: 0.6em 1.2em;
        font-size: 15px;
        font-weight: 700;
        cursor: pointer;
        transition: background-color 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    }
    div.stButton > button:hover {
        background-color: #e6b800 !important;
        color: #001a33 !important;
    }
    .css-18e3th9 {
        background-color: white !important;
        padding: 1rem 2rem 2rem 2rem;
        border-radius: 8px;
        color: #003366 !important;
    }
    h1, h2, h3 {
        color: #003366 !important;
        font-weight: 700;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .stAlert > div {
        border-left: 5px solid #003366 !important;
    }
    </style>
""", unsafe_allow_html=True)

# ----------------------------
# Image Banner
# ----------------------------
st.image("C:\\Users\\HP\\Downloads\\sbi.png", width=200)

# ----------------------------
# Sidebar UI
# ----------------------------
st.sidebar.title("Configuration")
st.sidebar.text_input("No of CIF", key="no_of_cif")

st.sidebar.selectbox(
    "Select Region",
    ["-- Select Region --", "Region 0", "Region R1", "Region K", "Region R2"],
    key="region"
)

if st.session_state.get("region") != "-- Select Region --":
    st.sidebar.radio(
        "Choose Action",
        ["-- Select Action --", "Create", "Fetch", "Update", "Show Stats", "Activity Log"],
        key="action"
    )

    if st.session_state.get("action") != "-- Select Action --":
        st.sidebar.selectbox(
            "Select Account Type",
            ["-- Select Account Type --", "CIF", "Account"],
            key="account_type"
        )

# ----------------------------
# Main UI
# ----------------------------
st.title("Bank CIF Management Portal")

region = st.session_state.get("region", "-- Select Region --")
action = st.session_state.get("action")
account_type = st.session_state.get("account_type")

if region == "-- Select Region --":
    st.info("Please select a region from the sidebar to continue.")
else:
    st.markdown(f"### üåç Selected Region: {region}")

    if not action or action == "-- Select Action --":
        st.info("Please select an action in the sidebar.")
    else:
        st.markdown(f"### üõ†Ô∏è Action: {action}")

        if not account_type or account_type == "-- Select Account Type --":
            st.info("Please select an account type in the sidebar.")
        else:
            st.markdown(f"### üè¶ Account Type: {account_type}")

            if account_type == "CIF":
                st.selectbox(
                    "Select CIF Type",
                    ["-- Select CIF Type --", "Minor" , "major", "Senior Citizen", "Resident India (RI)", "Non Resident (NRI)", "Cif With Pan"],
                    key="cif_type"
                )

            if account_type == "Account":
                st.selectbox(
                    "Select Account Sub-Type",
                    ["-- Select Account Type --", "saving", "ccod"],
                    key="account_subtype"
                )

            # Display current session data
            current_data = {
                "Region": region,
                "Action": action,
                "Account Type": account_type,
                "CIF Type": st.session_state.get("cif_type", ""),
                "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            # ----------------------------
            # Action Buttons
            # ----------------------------
            col1, col2, col3 = st.columns(3)

            # ‚ñ∂ Execute Process
            with col1:
                if st.button("‚ñ∂ Execute Process"):
                    try:
                        subprocess.Popen(BASH_FILE, shell=True)
                        st.info("Process started successfully!")
                    except Exception as e:
                        st.error(f"Error during execution: {e}")

            # üìÇ View Display Data
            with col2:
                if st.button("üìÇ View Saved Data"):
                    if os.path.exists(DISPLAY_FILE_PATH):
                        try:
                            df_display = pd.read_excel(DISPLAY_FILE_PATH)
                            st.dataframe(df_display)
                        except Exception as e:
                            st.error(f"Failed to load Excel file: {e}")
                    else:
                        st.warning("Display file not found.")

            # üíæ Save Data
            with col3:
                if st.button("üíæ Save Now"):
                    try:
                        data = {
                            "No of CIF": st.session_state.get("no_of_cif", ""),
                            "Region": st.session_state.get("region", ""),
                            "Action": st.session_state.get("action", ""),
                            "Account Type": st.session_state.get("account_type", ""),
                            "CIF Type": st.session_state.get("cif_type", "")
                        }

                        if (
                            data["Region"] != "-- Select Region --" and
                            data["Action"] == "Create" and
                            data["Account Type"] == "CIF" and
                            data["CIF Type"] in ["Individual", "Non Individual", "Minor", "major", "Senior Citizen", "Resident India (RI)", "Non Resident (NRI)", "Cif With Pan"]
                        ):
                            df = pd.DataFrame(data.items(), columns=["Key", "Value"])
                            df.to_excel(SAVE_FILE_PATH, index=False)
                            st.success("‚úÖ Data saved successfully.")
                        else:
                            st.warning("Please complete all required fields before saving.")
                    except Exception as e:
                        st.error(f"Save failed: {e}")
