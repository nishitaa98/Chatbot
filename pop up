import streamlit as st
import random
import uuid
import json
from datetime import datetime
from pathlib import Path

# Constants
SOURCE_IDS = ["Y2", "Y4", "Y5", "U7"]
VILLAGE_CODES = ["556949", "50987", "8765", "64335"]
CUSTOMER_TYPES = ["010203", "020304", "030405"]
CROSS_BORDER_RISKS = ["ZZ", "AA", "BB"]
GENDERS = ["F", "M", "O"]
DOCUMENT_TYPES = ["49", "50", "51"]
OCCUPATION_CODES = ["0301", "0302", "0303"]


OUTPUT_PATH = Path("data/test_data.json")


# Utility functions
def generate_random_name():
    return random.choice(["Amit", "Sneha", "Harshada", "Rahul", "Neha", "Raj"])


def generate_cif_entry() -> dict:
    return {
        "STD PHONE NUMBER BUSINESS": "0891",
        "ID_ISSUE_DATE": "00000000",
        "FATHER OR SPOUSE NAME": generate_random_name(),
        "MOBILE NUMBER": str(random.randint(6000000000, 9999999999)),
        "MARITAL_STATUS": "S",
        "FORM60 SUBMISSION DATE": datetime.now().strftime("%Y%m%d"),
        "CROSS BORDER RISK": random.choice(CROSS_BORDER_RISKS),
        "CUSTOMER_TYPE_2": random.choice(CUSTOMER_TYPES),
        "ISD CODE": "91",
        "OTHER THAN AGRICULTURAL_INCOME": str(random.randint(1000, 70000)),
        "PIN CODE": "413115",
        "GENDER_CODE": random.choice(GENDERS),
        "COUNTRY": "IN",
        "ANNUAL INCOME": str(random.randint(4001, 90000)),
        "FORM60_OR_PAN": "F",
        "DOOR FLATNO BUILDING SOCEITY": "BAVI ta barshi Bavi Solapur",
        "BRANCH CODE": "00036",
        "OVD_KYC_DOCUMENT_TYPE": random.choice(DOCUMENT_TYPES),
        "AGRICULTURAL INCOME": str(random.randint(0, 90000)),
        "CITY CODE": "413",
        "COUNTRY OF RISK": "IN",
        "UID_NUMBER": str(uuid.uuid4())[:12],
        "CUSTOMER RISK": "00",
        "REQUEST TELLER_ID": "3600003",
        "OCCUPATION CODE": random.choice(OCCUPATION_CODES),
        "DISTRICT CODE": "521",
        "CONSENT FLAG": "Y",
        "EMAIL ID": "",
        "VISUALLY IMPAIRED": "N",
        "REQUEST FOR INB": "N",
        "NATIONALITY": "IN",
        "OVD_KYC_DOCUMENT_DETAILS": str(uuid.uuid4())[:12],
        "CUSTOMER TYPE": random.choice(CUSTOMER_TYPES),
        "CIS ORGANISATION_CODE": "42",
        "STATE": "27",
        "CUSTOMER EVALUATION_REQUIRED": "N",
        "LAST NAME": "LONDHE",
        "FIRST NAME": generate_random_name(),
        "PAN AADHAR LINK": "N",
        "MIDDLE NAME": "HARIDAS",
        "DATE OF BIRTH": "21071999",
        "TRANSACTION DATE": datetime.now().strftime("%Y%m%d"),
        "VILLAGE_CODE": random.choice(VILLAGE_CODES),
        "SOURCE ID": random.choice(SOURCE_IDS),
        "BSR_ORGANISATION_CODE": "42"
    }


def generate_cifs(count: int) -> list:
    data = []
    for _ in range(count):
        entry = generate_cif_entry()
        entry["cif_id"] = str(random.randint(6000000, 7000000))
        entry["date"] = str(random.randint(8000000, 9000000))
        data.append(entry)

    OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(OUTPUT_PATH, "w") as f:
        json.dump(data, f, indent=4)

    return data


# --- Streamlit UI ---
st.set_page_config(page_title="CIF Data Generator", layout="wide")

st.title("ðŸ§¾ CIF Test Data Generator")

st.markdown("""
This app generates dummy CIF (Customer Information File) data and saves it in JSON format.
You can preview the data and download the file.
""")

# Input: number of entries
count = st.number_input("Number of CIF entries to generate", min_value=1, max_value=1000, value=10, step=1)

# Generate button
if st.button("Generate CIF Data"):
    with st.spinner("Generating data..."):
        data = generate_cifs(count)
    st.success(f"Generated {count} CIF entries!")

    # Show data in Streamlit
    st.subheader("Generated Data Preview")
    st.json(data[:3], expanded=False)  # Show only first 3 records as preview

    # Download JSON
    with open(OUTPUT_PATH, "rb") as f:
        st.download_button(
            label="ðŸ“¥ Download JSON",
            data=f,
            file_name="cif_test_data.json",
            mime="application/json"
        )
